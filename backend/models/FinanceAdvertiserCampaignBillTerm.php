<?php

namespace backend\models;

use common\models\Campaign;
use common\models\Channel;
use Yii;

/**
 * This is the model class for table "finance_advertiser_campaign_bill_term".
 *
 * @property string $bill_id
 * @property integer $adv_id
 * @property string $time_zone
 * @property integer $campaign_id
 * @property integer $start_time
 * @property integer $end_time
 * @property integer $clicks
 * @property integer $unique_clicks
 * @property integer $installs
 * @property integer $match_installs
 * @property integer $redirect_installs
 * @property integer $redirect_match_installs
 * @property string $pay_out
 * @property string $adv_price
 * @property string $daily_cap
 * @property string $cap
 * @property string $cost
 * @property string $redirect_cost
 * @property string $revenue
 * @property string $redirect_revenue
 * @property integer $create_time
 * @property integer $update_time
 * @property integer $channel_id
 *
 * @property Campaign $campaign
 * @property FinanceAdvertiserBillTerm $bill
 */
class FinanceAdvertiserCampaignBillTerm extends \yii\db\ActiveRecord
{
    public $channel_name;
    public $deduction_cost;
    public $deduction_revenue;
    public $pending_cost;
    public $pending_revenue;
    public $pending_id;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'finance_advertiser_campaign_bill_term';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['bill_id', 'adv_id', 'campaign_id', 'start_time', 'end_time'], 'required'],
            [['adv_id', 'campaign_id', 'start_time', 'end_time', 'clicks', 'unique_clicks', 'installs', 'match_installs', 'redirect_installs', 'redirect_match_installs', 'create_time', 'update_time'], 'integer'],
            [['pay_out', 'adv_price', 'cost', 'redirect_cost', 'revenue', 'redirect_revenue'], 'number'],
            [['bill_id'], 'string', 'max' => 255],
            [['time_zone', 'daily_cap', 'cap'], 'string', 'max' => 100],
            [['channel_id'], 'exist', 'skipOnError' => true, 'targetClass' => Channel::className(), 'targetAttribute' => ['channel_id' => 'id']],
            [['campaign_id'], 'exist', 'skipOnError' => true, 'targetClass' => Campaign::className(), 'targetAttribute' => ['campaign_id' => 'id']],
            [['bill_id'], 'exist', 'skipOnError' => true, 'targetClass' => FinanceAdvertiserBillTerm::className(), 'targetAttribute' => ['bill_id' => 'bill_id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'bill_id' => 'Bill ID',
            'adv_id' => 'Adv ID',
            'time_zone' => 'Time Zone',
            'campaign_id' => 'Campaign ID',
            'channel_id' => 'Channel ID',
            'start_time' => 'Start Time',
            'end_time' => 'End Time',
            'clicks' => 'Clicks',
            'unique_clicks' => 'Unique Clicks',
            'installs' => 'Installs',
            'match_installs' => 'Match Installs',
            'redirect_installs' => 'Redirect Installs',
            'redirect_match_installs' => 'Redirect Match Installs',
            'pay_out' => 'Pay Out',
            'adv_price' => 'Adv Price',
            'daily_cap' => 'Daily Cap',
            'cap' => 'Cap',
            'cost' => 'Cost',
            'redirect_cost' => 'Redirect Cost',
            'revenue' => 'Revenue',
            'redirect_revenue' => 'Redirect Revenue',
            'create_time' => 'Create Time',
            'update_time' => 'Update Time',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCampaign()
    {
        return $this->hasOne(Campaign::className(), ['id' => 'campaign_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBill()
    {
        return $this->hasOne(FinanceAdvertiserBillTerm::className(), ['bill_id' => 'bill_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getChannel()
    {
        return $this->hasOne(Channel::className(), ['id' => 'channel_id']);
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $this->create_time = time();
        } else {
            $this->update_time = time();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @param $start_time
     * @param $end_time
     * @param $adv_id
     * @return array|null|FinanceAdvertiserCampaignBillTerm
     */
    public static function statsByAdv($start_time, $end_time, $adv_id)
    {
        $query = static::find();
        $query->select([
            'sum(clicks) clicks',
            'sum(unique_clicks) unique_clicks',
            'sum(installs) installs',
            'sum(match_installs) match_installs',
            'sum(redirect_installs) redirect_installs',
            'sum(redirect_match_installs) redirect_match_installs',
            'sum(pay_out) pay_out',
            'sum(adv_price) adv_price',
            'sum(cost) cost',
            'sum(redirect_cost) redirect_cost',
            'sum(revenue) revenue',
            'sum(redirect_revenue) redirect_revenue',
        ]);
        $query->where(['start_time' => $start_time]);
        $query->andWhere(['end_time' => $end_time]);
        $query->andWhere(['adv_id' => $adv_id]);
        return $query->one();
    }

    /**
     * @param $period
     * @param $status
     * @param $channel
     * @param $advs
     * @return array|null|\yii\db\ActiveRecord
     */
    public static function getReceivedOrReceivablePerMonthByAdv($period,$status,$channel,$advs){

        $query = static::find();
        $query->alias("fab");

        $query->select([
            'sum(fab.revenue) revenue',
        ]);

        // grid filtering conditions
        $query->andFilterWhere([
            'fab.channel_id' => $channel,
            'a.period' => $period,
        ]);
        $query->from("finance_advertiser_campaign_bill_term fab");
        $query->joinWith('bill a');

        $query->andFilterWhere(['in', 'fab.adv_id', $advs])
//            ->andFilterWhere(['like', 'fab.time_zone', $this->time_zone])
            ->andFilterWhere(['<>', 'fab.revenue', 0])
            ->andFilterWhere(['a.status' => $status]);
        return $query->one();
    }
}
